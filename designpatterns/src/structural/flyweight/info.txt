1>Flyweight design pattern is used when we need to create a lot of Objects of a class.
Since every object consumes memory space that can be crucial for low memory devices, such as mobile devices or
embedded systems, flyweight design pattern can be applied to reduce the load on memory by sharing objects.

2>In Flyweight pattern we use a HashMap that stores reference to the object which have already been created,
every object is associated with a key. Now when a client wants to create an object, he simply has to pass a key
associated with it and if the object has already been created we simply get the reference to that object else
it creates a new object,put it in the map and then returns it reference to the client.

3>To apply flyweight pattern, we need to divide Object property into intrinsic and extrinsic properties.
Intrinsic properties make the Object unique whereas extrinsic properties (which can be shared among objects)
are set by client code and used to perform different operations. For example, an Object Circle can have
extrinsic properties such as color and width.
Consider an example of a text editor where we can use alphabet set between (A-Z).If we are going to create a
100 page document assuming (2000 character per page), we need to create 20000 character objects in
memory with every character having its own properties like color,font,size etc.
How to use flyweight here:-
Create a map of 26 objects for (A-Z) having intrinsic state as its character value.Now color,font,size etc are extrinsic
state and will be passed by client code.So whenever a client code needs a character object, it will get it
from the map, and set the respective extrinsic value as and when needed.


4>Participants in Flyweight design pattern:-
 Let us consider the game of counter strike.Here the players can be either Terrorist or Counter Terrorist.
 If we do not follow the Fly Weight Design Pattern then we will have to create n number of objects,
 one for each player. But with flyweight we will only have to create 2 objects one for terrorists and other
 for counter terrorists, we will reuse then again and again whenever required.

 Intrinsic State : Here ‘task’ is an intrinsic state for both types of players, since this is always same for
 T’s/CT’s. We can have some other states like their color or any other properties which are similar for all
 the Terrorists/Counter Terrorists in their respective Terrorists/Counter Terrorists class.

 Extrinsic State : Weapon is an extrinsic state since each player can carry any weapon of his/her choice.
 Weapon need to be passed as a parameter by the client itself.

 1>Flyweight:- It is an interface through which flyweight can set or act on the extrinsic state.

 interface Player
 {
     public void assignWeapon(String weapon);
     public void mission();
 }

 2>ConcreteFlyweight :- Concrecte class which implements Flyweight interface. It mainatins a state which is
 intrinsic to it and it should be able to manipulate with the extrinsic state.

 // Terrorist must have weapon and mission
 class Terrorist implements Player
 {
     // Intrinsic Attribute
     private final String TASK;

     // Extrinsic Attribute
     private String weapon;

     public Terrorist()
     {
         TASK = "PLANT A BOMB";
     }
     public void assignWeapon(String weapon)
     {
         // Assign a weapon
         this.weapon = weapon;
     }
     public void mission()
     {
         //Work on the Mission
         System.out.println("Terrorist with weapon "
                            + weapon + "|" + " Task is " + TASK);
     }
 }

 // CounterTerrorist must have weapon and mission
 class CounterTerrorist implements Player
 {
     // Intrinsic Attribute
     private final String TASK;

     // Extrinsic Attribute
     private String weapon;

     public CounterTerrorist()
     {
         TASK = "DIFFUSE BOMB";
     }
     public void assignWeapon(String weapon)
     {
         this.weapon = weapon;
     }
     public void mission()
     {
         System.out.println("Counter Terrorist with weapon "
                            + weapon + "|" + " Task is " + TASK);
     }
 }


3> FlyweightFactory:- It creates/manages and ensures sharing of flyweight objects.

// Class used to get a player using HashMap (Returns
// an existing player if a player of given type exists.
// Else creates a new player and returns it.
class PlayerFactory
{
    /* HashMap stores the reference to the object
       of Terrorist(TS) or CounterTerrorist(CT).  */
    private static HashMap <String, Player> hm =
                         new HashMap<String, Player>();

    // Method to get a player
    public static Player getPlayer(String type)
    {
        Player p = null;

        /* If an object for TS or CT has already been
           created simply return its reference */
        if (hm.containsKey(type))
                p = hm.get(type);
        else
        {
            /* create an object of TS/CT  */
            switch(type)
            {
            case "Terrorist":
                System.out.println("Terrorist Created");
                p = new Terrorist();
                break;
            case "CounterTerrorist":
                System.out.println("Counter Terrorist Created");
                p = new CounterTerrorist();
                break;
            default :
                System.out.println("Unreachable code!");
            }

            // Once created insert it into the HashMap
            hm.put(type, p);
        }
        return p;
    }
}


4>Client:- A client uses FlyweightFactory in order to create/use flyweights and it also does computing and
 maintaining of extrinsic state.


 // Driver class
 public class CounterStrike
 {
     // All player types and weopons (used by getRandPlayerType()
     // and getRandWeapon()
     private static String[] playerType =
                     {"Terrorist", "CounterTerrorist"};
     private static String[] weapons =
       {"AK-47", "Maverick", "Gut Knife", "Desert Eagle"};


     // Driver code
     public static void main(String args[])
     {
         /* Assume that we have a total of 10 players
            in the game. */
         for (int i = 0; i < 10; i++)
         {
             /* getPlayer() is called simply using the class
                name since the method is a static one */
             Player p = PlayerFactory.getPlayer(getRandPlayerType());

             /* Assign a weapon chosen randomly uniformly
                from the weapon array  */
             p.assignWeapon(getRandWeapon());

             // Send this player on a mission
             p.mission();
         }
     }

     // Utility methods to get a random player type and
     // weapon
     public static String getRandPlayerType()
     {
         Random r = new Random();

         // Will return an integer between [0,2)
         int randInt = r.nextInt(playerType.length);

         // return the player stored at index 'randInt'
         return playerType[randInt];
     }
     public static String getRandWeapon()
     {
         Random r = new Random();

         // Will return an integer between [0,5)
         int randInt = r.nextInt(weapons.length);

         // Return the weapon stored at index 'randInt'
         return weapons[randInt];
     }
 }




5>Flyweight pattern in java api :- Integer.valueOf(int i)
 (also in Boolean, Byte, Character, Short, Long and BigDecimal)
