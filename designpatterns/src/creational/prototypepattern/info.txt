1> When the cost of object creation is costly and complex(time consuming) and we already have a similar
object instance in hand, then we go for prototype pattern. Prototype means making a clone.
2>One of the best available way to create object from existing objects are clone() method
(Cloneable interface). Clone is the simplest approach to implement prototype pattern.
clone() takes a block of memomy from the java heap. The block size is the same size of the original object
and then performs a bitwise copy from original to the cloned object. This kind of copy is shallow copy ie
modification in the original object will modify the cloned object.
3>Prototype Design Participants:-
  1) Prototype : This is the prototype of actual object.
  2) Prototype Manager : This is used as registry service to have all prototypes accessible using simple
     string parameters.
     When the application uses a lot of prototypes that can be created and destroyed dynamically,
     a registry of available prototypes should be kept. This registry is called the prototype manager and
     it should implement operations for managing registered prototypes like registering a prototype under a
     certain key, searching for a prototype with a given key, removing one from the register, etc.
    The clients will use the interface of the prototype manager to handle prototypes at run-time and will
    ask for permission before using the Clone() method.
  3) Client : Client will be responsible for using registry service to access prototype instances.

4>When to use the Prototype Design Pattern:-
  When a system should be independent of how its products are created, composed, and represented and
  When the classes to instantiate are specified at run-time.
  For example,
  1) By dynamic loading or
  2) When instances of a class can have one of only a few different combinations of state. It may be more
  convenient to install a corresponding number of prototypes and clone them rather than instantiating the
  class manually, each time with the appropriate state.

5>Advantages of Prototype Design Pattern:-
  ->Adding and removing products at run-time – Prototypes let you incorporate a new concrete product class into a system simply
    by registering a prototypical instance with the client. That’s a bit more flexible than other creational
    patterns, because a client can install and remove prototypes at run-time.
  ->Specifying new objects by varying values – Highly dynamic systems let you define new behavior through
  object composition by specifying values for an object’s variables and not by defining new classes.
  ->Reduced subclassing – Factory Method often produces a hierarchy of Creator classes that parallels the product class hierarchy. The
  Prototype pattern lets you clone a prototype instead of asking a factory method to make a new object. Hence you don’t need a Creator
  class hierarchy at all.

6>Disadvantages of Prototype Design Pattern:-

  ->Overkill for a project that uses very few objects and/or does not have an underlying emphasis on the extension of prototype chains.
  ->Each subclass of Prototype must implement the clone() operation which may be difficult, when the classes under consideration already
  exist. Also implementing clone() can be difficult when their internals include objects that don’t support copying or have circular
  references.

7>usage in java api:-
java.lang.Object#clone() (the class has to implement java.lang.Cloneable)
spring uses this when we define the bean with scope "prototype";

8>Example 1

  In building stages for a game that uses a maze and different visual objects that the character encounters it is needed
  a quick
  method of generating the haze map using the same objects: wall, door, passage, room...
  The Prototype pattern is useful in this case because instead of hard coding (using new operation) the
  room, door, passage and wall objects that get instantiated, CreateMaze method will be parameterized by
  various prototypical room, door, wall and passage objects, so the composition of the map can be easily
  changed by replacing the prototypical objects with different ones.

  The Client is the CreateMaze method and the ConcretePrototype classes will be the ones creating copies for different objects.

  Example 2:

  Suppose we are doing a sales analysis on a set of data from a database. Normally, we would copy the
  information from the database,encapsulate it into an object and do the analysis.
  But if another analysis is needed on the same set of data, reading the database again and creating a new
  object is not the best idea. If we are using the Prototype pattern then the object
  used in the first analysis will be cloned and used for the other analysis.

  The Client is here one of the methods that process an object that encapsulates information from the
  database. The ConcretePrototype classes will be classes that, from the object created after
  extracting data from the database, will copy it into objects used for analysis.


9>Object Pooling:- (refer)
http://www.oodesign.com/object-pool-pattern.html